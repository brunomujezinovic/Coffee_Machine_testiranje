type: edu
custom_name: stage5
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |-
    package machine;
    import java.util.Scanner;
    public class CoffeeMachine {
        public static void main(String[] args) {

            Scanner s= new Scanner(System.in);

            int water =400;
            int milk =540;
            int coffee =120;
            int cups =9;
            int pare= 550;
            System.out.println("The coffee machine has:");
            System.out.println(water + " ml of water");
            System.out.println(milk + " ml of milk");
            System.out.println(coffee + " g of coffee beans");
            System.out.println(cups + " disposable cups");
            System.out.println("$"+pare + " of money");
            System.out.println("");

            String akcija;
            System.out.println("Write action (buy, fill, take):");
                   akcija = s.next();

            switch (akcija) {

                case "buy":
                    System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:");
                    int a= s.nextInt();
                    if (a==1){
                        System.out.println("The coffee machine has:");
                        System.out.println((water - 250) +  " ml of water");
                        System.out.println(milk + " ml of milk");
                        System.out.println((coffee - 16) + " g of coffee beans");
                        System.out.println((cups - 1) + " disposable cups");
                        System.out.println("$"+(pare + 4) + " of money");
                    }
                    if (a==2){
                        System.out.println("The coffee machine has:");
                        System.out.println((water - 350) +  " ml of water");
                        System.out.println((milk - 75) + " ml of milk");
                        System.out.println((coffee - 20) + " g of coffee beans");
                        System.out.println((cups - 1) + " disposable cups");
                        System.out.println("$"+(pare + 7) + " of money");
                    }
                    if (a==3){
                        System.out.println("The coffee machine has:");
                        System.out.println((water - 200) +  " ml of water");
                        System.out.println((milk - 100) + " ml of milk");
                        System.out.println((coffee - 12) + " g of coffee beans");
                        System.out.println((cups - 1) + " disposable cups");
                        System.out.println("$"+(pare + 6) + " of money");
                    }

                    break;

                case "fill":
                        System.out.println("Write how many ml of water you want to add:");
                        int addwater= s.nextInt();
                        System.out.println("Write how many ml of milk you want to add:");
                        int addmilk= s.nextInt();
                        System.out.println("Write how many grams of coffee beans you want to add:");
                        int addcoffee= s.nextInt();
                        System.out.println("Write how many disposable cups of coffee you want to add:");
                        int addcups= s.nextInt();

                        System.out.println("The coffee machine has:");
                        System.out.println((water +addwater) +  " ml of water");
                        System.out.println((milk + addmilk) + " ml of milk");
                        System.out.println((coffee +addcoffee) + " g of coffee beans");
                        System.out.println((cups + addcups) + " disposable cups");
                        System.out.println("$"+pare + " of money");

                    break;

                case "take":

                    System.out.println("I gave you $"+pare);

                    System.out.println("The coffee machine has:");
                    System.out.println(water + " ml of water");
                    System.out.println(milk + " ml of milk");
                    System.out.println(coffee + " g of coffee beans");
                    System.out.println(cups + " disposable cups");
                    System.out.println("$" + 0 + " of money");





                default:
                    System.out.println("");


                }

            }

        }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/33/stages/179/implement#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #1

    This test is exactly like in the example - try to run it by yourself

    Please find below the output of your program during this failed test.
    Note that the &#39;&gt;&#39; character indicates the beginning of the input line.

    ---

    Write action (buy, fill, take, remaining, exit):
    &gt; remaining
    The coffee machine has:
    400 ml of water
    540 ml of milk
    120 g of coffee beans
    9 disposable cups
    550 of money
    Write action (buy, fill, take, remaining, exit):
    &gt; buy
    What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:
    &gt; 2
    I have enough resources, making you a coffee!
    Write action (buy, fill, take, remaining, exit):
    &gt; buy
    What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:
    &gt; 2
    Sorry, not enough water!
    Write action (buy, fill, take, remaining, exit):
    &gt; fill
    Write how many ml of water you want to add:
    &gt; 1000
    Write how many ml of milk you want to add:
    &gt; 0
    Write how many grams of coffee beans you want to add:
    &gt; 0
    Write how many disposable cups of coffee you want to add:
    &gt; 0
    Write action (buy, fill, take, remaining, exit):
    &gt; buy
    What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:
    &gt; 2
    Sorry, not enough water!
    Write action (buy, fill, take, remaining, exit):
    &gt; take
    I gave you $557
    Write action (buy, fill, take, remaining, exit):
    &gt; remaining
    The coffee machine has:
    50 ml of water
    465 ml of milk
    100 g of coffee beans
    8 disposable cups
    0 of money
    Write action (buy, fill, take, remaining, exit):
    &gt; exit
  time: Wed, 22 Sep 2021 15:06:32 UTC
record: 4
